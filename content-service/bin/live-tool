#!/usr/bin/env node
require('isomorphic-fetch');
const argv = require('yargs').argv;

if (!argv.apikey) {
  console.error('Must specify --apikey');
  process.exit(1);
}

const AUTH_USER = 'apikey';
const AUTH_CREDS = 'Basic ' + new Buffer(`${AUTH_USER}:${argv.apikey}`).toString("base64");

const commands = {
  'search': {
    'beacon': function(args) {
      if (!args[0] || !args[1] || !args[2]) {
        console.error('Required args: <lat> <long> <radius>');
        console.error('Replace the negative symbol with an underscore for lat long');
        process.exit(1);
        return;
      }

      const lat = Number(String(args[0]).replace('_', '-'));
      const long = Number(String(args[1]).replace('_', '-'));

      const radius = Number(args[2]);

      apiGet(`http://localhost:3000/v1/search/beacons/${lat},${long},${radius}`);
    }
  },
  'create': {
    'channel': function(args) {
      if (!args[0] || !args[1]) {
        console.error('Required args: <name> <email> <optional:tags>');
        process.exit(1);
        return;
      }

      const payload = {
        name: args[0],
        email: args[1],
        tags: args[2] || ''
      };

      apiCall('https://tengam.org/content/v1/channel', payload);
    },
    'beacon': function(args) {
      console.log(args);
      if (!args[0] || !args[1] || !args[2] || !args[3]) {
        console.error('Required args: <channelname> <latitude> <longitude> <url>');
        console.error('Replace the negative symbol with an underscore for lat lon');
        process.exit(1);
        return;
      }

      const channelName = args[0];
      const payload = {
        location: {
          lat: Number(String(args[1]).replace('_', '-')),
          long: Number(String(args[2]).replace('_', '-'))
        },
        is_virtual: true,
        content_attachment: {
          url: args[3],
          calls_to_action: {},
          additional_metadata: {}
        }
      };

      apiCall(`https://tengam.org/content/v1/channel/${channelName}/beacons`, payload);
    }
  }
};

const command = argv._[0];

if (!command) {
  console.log('Usage: ./data-tool <command> <type> <...args>');
  console.log('Available commands: ' + Object.keys(commands));
  console.error(`Unknown command '${command}'`);
  process.exit(1);
}

const type = argv._[1];

if (!commands[command][type]) {
  console.log(`Usage: ./data-local ${command} <type> <...args>`);
  console.log('Available types: ' + Object.keys(commands[command]).join(', '));
  console.error(`Unkown type '${type}'`);
  process.exit(1);
}

commands[command][type](argv._.slice(2));

function apiGet(endpoint) {
  fetch(endpoint, {
    method: 'GET',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'Authorization': AUTH_CREDS
    }
  }).then((response) => {
    return response.text();
  }).then(console.log)
  .catch((e) => console.error(e));
}

function apiCall(endpoint, payload) {
  fetch(endpoint, {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'Authorization': AUTH_CREDS
    },
    body: JSON.stringify(payload)
  }).then((response) => {
    console.dir(response.headers);
  }).then(console.log)
  .catch((e) => console.error(e));
}
